---
import Layout from "../layouts/Layout.astro";
import { timeline, IEvent, referenceYear } from "../utils/timeline";

export type ITimelineSpan = "day" | "year";

const getEventTimeByRatio = (
  yearBeforePresent: number,
  timelineSpan: ITimelineSpan
) => {
  const startTimeline = timeline[0].dateYearsBeforePresent;
  const endTimeline = 0;
  const yearsComparedToStart = startTimeline - yearBeforePresent;
  const timeSpanYearEquivalent = startTimeline - endTimeline;
  let spanRatio;
  if (timelineSpan === "day") {
    spanRatio = 24;
  } else if (timelineSpan === "year") {
    spanRatio = 365;
  } else {
    return false;
  }
  const ratioOverTimeSpan =
    (yearsComparedToStart * spanRatio) / timeSpanYearEquivalent;

  if (timelineSpan === "day") {
    return timeConvert(ratioOverTimeSpan);
  } else if (timelineSpan === "year") {
    // TODO: make it work
    return ratioOverTimeSpan;
  } else {
    return ratioOverTimeSpan;
  }
};

// TODO: make it work
const convertDaysToDate = (dayNumber: number) => {};

// TODO: add seconds
function timeConvert(hours: number) {
  // return hours;
  const hoursToDisplay = Math.floor(hours);
  const minutes = (hours - Math.floor(hours)) * 60;
  const minutesToDisplay = Math.floor(minutes);
  const seconds = minutes % 60;
  const secondsToDisplay = Math.floor(minutes % 60);
  return (
    hoursToDisplay + ":" + minutesToDisplay + "'" + secondsToDisplay + "''"
  );
}
---

<script>
  const adjustTimeline = (
    spanElmt: HTMLSpanElement,
    timelineUnit: ITimelineSpan
  ) => {
    if (spanElmt?.dataset.unit === timelineUnit) {
      spanElmt.style.display = "block";
    } else if (spanElmt?.dataset.unit !== timelineUnit) {
      spanElmt.style.display = "none";
    }
  };

  const listenToTimelineInputChange = (e: Event) => {
    const timelineUnit = e?.target?.value;
    if (!timelineUnit) return false;
    document
      .querySelectorAll("ul > li > span")
      .forEach((eventElSpan) => adjustTimeline(eventElSpan, timelineUnit));
  };
  document
    .querySelectorAll("input")
    .forEach((input) =>
      input.addEventListener("input", listenToTimelineInputChange)
    );
</script>

<Layout title='Welcome to Astro.'>
  <h1>🐵🔥 <span class='text-gradient'>Humankind</span> Timeline 🚀👩‍🚀</h1>
  <main>
    <form class='time-unit-selection'>
      <fieldset>
        <legend>Select a timeline unit:</legend>

        <div>
          <input
            type='radio'
            id='years-vs-present'
            name='drone'
            value='years-vs-present'
          />
          <label for='years-vs-present'>Years before present</label>
        </div>

        <div>
          <input
            type='radio'
            id='years-vs-era'
            name='drone'
            value='years-vs-era'
          />
          <label for='years-vs-era'>Years compared to out era</label>
        </div>

        <div>
          <input
            type='radio'
            id='history-in-a-year'
            name='drone'
            value='history-in-a-year'
          />
          <label for='history-in-a-year'>If history was 1 year</label>
        </div>

        <div>
          <input
            type='radio'
            id='history-in-a-day'
            name='drone'
            value='history-in-a-day'
            checked
          />
          <label for='history-in-a-day'>If history was 1 day</label>
        </div>
      </fieldset>
    </form>
  </main>
  <ul role='list' class='timeline' data-timeline-role='timeline'>
    {
      timeline.map((event: IEvent) => (
        <li data-timeline-role='event'>
          <span data-unit='years-vs-present' style={"display: none;"}>
            {event.dateYearsBeforePresent} before present day
          </span>
          <span data-unit='years-vs-era' style={"display: none;"}>
            {event.dateYearsBeforePresent < referenceYear
              ? referenceYear - event.dateYearsBeforePresent
              : referenceYear - event.dateYearsBeforePresent}
          </span>
          <span data-unit='history-in-a-year' style={"display: none;"}>
            {getEventTimeByRatio(event.dateYearsBeforePresent, "year")}
          </span>
          <span data-unit='history-in-a-day'>
            {getEventTimeByRatio(event.dateYearsBeforePresent, "day")}
          </span>
          {event.title}
        </li>
      ))
    }
  </ul>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
</style>
