---
import Layout from "../layouts/Layout.astro";
import { timeline, IEvent, referenceYear } from "../utils/timeline";

export type ITimelineSpan = "day" | "year";

const getEventTimeByRatio = (
  yearBeforePresent: number,
  timelineSpan: ITimelineSpan
) => {
  const startTimeline = timeline[0].dateYearsBeforePresent;
  const endTimeline = 0;
  const yearsComparedToStart = startTimeline - yearBeforePresent;
  const timeSpanYearEquivalent = startTimeline - endTimeline;
  let spanRatio;
  if (timelineSpan === "day") {
    spanRatio = 24;
  } else if (timelineSpan === "year") {
    spanRatio = 365;
  } else {
    return false;
  }
  const ratioOverTimeSpan =
    (yearsComparedToStart * spanRatio) / timeSpanYearEquivalent;

  if (timelineSpan === "day") {
    return displayHoursMinutesSeconds(ratioOverTimeSpan);
  } else if (timelineSpan === "year") {
    return convertDaysToDate(ratioOverTimeSpan);
  } else if (timelineSpan === "year") {
    console.log("ratio");
  } else {
    return ratioOverTimeSpan;
  }
};

function addDays(date: Date, days: number) {
  const result = date;
  const daysInteger = Math.floor(days);
  const hours = days - daysInteger;

  result.setDate(result.getDate() + daysInteger);
  result.setHours(...timeConvert(hours));
  return result;
}

const convertDaysToDate = (daysNumber: number) => {
  const thisStartOfYearDate = new Date(Date.UTC(2023, 0, 1, 0, 0, 0));
  const adjustedDate = addDays(thisStartOfYearDate, daysNumber);
  return adjustedDate.toLocaleDateString(undefined, {
    month: "long",
    day: "numeric",
  });
};

function timeConvert(hours: number): number[] {
  const hoursToDisplay = Math.floor(hours);
  const minutes = (hours - Math.floor(hours)) * 60;
  const minutesToDisplay = Math.floor(minutes);
  const secondsToDisplay = Math.floor(minutes % 60);
  return [hoursToDisplay, minutesToDisplay, secondsToDisplay];
}

const displayHoursMinutesSeconds = (hours: number): string => {
  const hoursMinSecArr = timeConvert(hours);
  return `${hoursMinSecArr[0]}:${hoursMinSecArr[1]}'${hoursMinSecArr[2]}''`;
};

const enableDistanceInput = true;
---

<script>
  export type ITimelineSpan = "day" | "year";

  if (!CSS.supports("selector(:has(input))")) {
    const adjustTimeline = (
      spanElmt: HTMLSpanElement,
      timelineUnit: ITimelineSpan
    ) => {
      if (spanElmt?.dataset.unit === timelineUnit) {
        spanElmt.style.display = "block";
      } else if (
        spanElmt?.dataset.unit === "history-in-distance" &&
        timelineUnit
      ) {
        spanElmt.style.display = "block";
      } else if (spanElmt?.dataset.unit !== timelineUnit) {
        spanElmt.style.display = "none";
      }
    };

    const listenToTimelineInputChange = (e: Event) => {
      const timelineUnit =
        e.target.type === "radio" ? e?.target?.value : "history-in-distance";
      if (!timelineUnit) return false;
      document
        .querySelectorAll("ul > li > div.time > span")
        .forEach((eventElSpan) => adjustTimeline(eventElSpan, timelineUnit));
    };
    document
      .querySelectorAll("input")
      .forEach((input) =>
        input.addEventListener("input", listenToTimelineInputChange)
      );
  }

  const populateCustomDistance = () => {
    const totalDistance = document?.getElementById("distance")?.value;
    document
      .querySelectorAll(
        "ul > li > div.time > span[data-unit='history-in-distance']"
      )
      .forEach(
        (eventElSpan) =>
          (eventElSpan.textContent = convertTimedRatioedOverCustomNumber(
            Number(eventElSpan?.closest("li")?.dataset?.years),
            Number(totalDistance)
          ))
      );
  };

  import { timeline } from "../utils/timeline";

  const convertTimedRatioedOverCustomNumber = (
    yearsBeforePresent: number,
    totalDistance: number
  ) => {
    const startTimeline = timeline[0].dateYearsBeforePresent;
    const endTimeline = 0;
    const yearsComparedToStart = startTimeline - yearsBeforePresent;
    const timeSpanYearEquivalent = startTimeline - endTimeline;
    const eventRatio = yearsComparedToStart / timeSpanYearEquivalent;
    if (!totalDistance) return "please enter a valid distance";
    return isNaN(eventRatio * totalDistance)
      ? "-"
      : `${eventRatio * totalDistance}m`;
  };
  document
    .querySelectorAll(".require-js input")
    .forEach((input) =>
      input.addEventListener("input", populateCustomDistance)
    );
</script>
<Layout title='üë©‚ÄçüöÄHumankind timeline'>
  <h1>üêµüî• <span class='text-gradient'>Humankind</span> Timeline üöÄüë©‚ÄçüöÄ</h1>
  <p class='tagline'>
    Experience the entire span of human history compressed into a single
    day/year,
    <br />and gain a fresh perspective on the most significant events that
    shaped us.
  </p>
  <main>
    <form class='time-unit-selection card'>
      <fieldset>
        <legend>Select a timeline unit ‚è∞</legend>

        <div class='inputs-group'>
          <div class='input-option'>
            <input
              type='radio'
              id='history-in-a-year'
              name='display-unit-timeline'
              value='history-in-a-year'
              checked
            />
            <label for='history-in-a-year'>If History was 1 year</label>
          </div>
          <div class='input-option'>
            <input
              type='radio'
              id='history-in-a-day'
              name='display-unit-timeline'
              value='history-in-a-day'
            />
            <label for='history-in-a-day'>If History was 1 day</label>
          </div>
          <div class='input-option'>
            <input
              type='radio'
              id='years-vs-present'
              name='display-unit-timeline'
              value='years-vs-present'
            />
            <label for='years-vs-present'>Years before present</label>
          </div>
          <div class='input-option'>
            <input
              type='radio'
              id='years-vs-era'
              name='display-unit-timeline'
              value='years-vs-era'
            />
            <label for='years-vs-era'>Years compared to our era</label>
          </div>
          {
            enableDistanceInput && (
              <div
                data-container='distance-inputs-container'
                class='input-option two-rows-reveal require-js'
              >
                <input
                  type='radio'
                  id='history-in-distance'
                  name='display-unit-timeline'
                  value='history-in-distance'
                />
                <label for='history-in-distance'>
                  History scaled to specific distance
                </label>
                <div class='distance-input'>
                  <label for='distance'>Distance (m)</label>
                  <input type='number' name='distance' id='distance' />
                </div>
              </div>
            )
          }
        </div>
      </fieldset>
    </form>
    <section class='timeline'>
      <ul role='list' class='timeline' data-timeline-role='timeline'>
        {
          timeline.map((event: IEvent, i) => (
            <li
              data-timeline-role='event'
              data-years={event.dateYearsBeforePresent}
            >
              <div class='time text-gradient'>
                <span data-unit='years-vs-present' class='hidden-on-load'>
                  {event.dateYearsBeforePresent} before present day
                </span>
                <span data-unit='years-vs-era' class='hidden-on-load'>
                  {event.dateYearsBeforePresent < referenceYear
                    ? referenceYear - event.dateYearsBeforePresent
                    : referenceYear - event.dateYearsBeforePresent}
                </span>
                <span data-unit='history-in-a-year'>
                  {i !== timeline.length - 1
                    ? getEventTimeByRatio(
                        event.dateYearsBeforePresent,
                        "year"
                      ) +
                      " " +
                      getEventTimeByRatio(event.dateYearsBeforePresent, "day")
                    : "End of the year, midnight"}
                </span>
                <span data-unit='history-in-a-day' class='hidden-on-load'>
                  {i !== timeline.length - 1
                    ? getEventTimeByRatio(event.dateYearsBeforePresent, "day")
                    : "midnight"}
                </span>
                <span data-unit='history-in-distance' class='hidden-on-load'>
                  Custom distance
                </span>
              </div>
              <div class='title'>
                {event.events.map((evt) => (
                  <p>{evt}</p>
                ))}
              </div>
            </li>
          ))
        }
      </ul>
      <div class='vertical-line'></div>
    </section>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 30px 0;
    max-width: 60ch;
    display: flex;
    flex-direction: column;
    align-items: center;
    accent-color: var(--pink-1);
  }
  h1 {
    font-size: 2rem;
    font-weight: 800;
    margin: 0;
  }
  .tagline {
    color: var(--grey-green-2);
    font-style: italic;
    font-weight: 100;
    font-size: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  form.card {
    align-self: center;
    padding: 25px;
    box-shadow: var(--shadow-elevation-high);
    margin-bottom: 70px;
    min-block-size: auto;
    min-inline-size: auto;
  }
  fieldset {
    border: none;
  }
  legend {
    font-size: 1.5em;
    font-weight: bold;
    color: var(--green-2-darker);
    padding-bottom: 15px;
  }
  fieldset div.inputs-group {
    display: flex;
    flex-direction: column;
    gap: 3px;
  }
  fieldset div.input-option {
    padding: 5px 0 7px;
    border-radius: var(--radius-1);
  }
  fieldset div.input-option:not(.two-rows-reveal) {
    display: flex;
  }
  fieldset div.input-option:focus-within {
    outline: 4px solid var(--green-2-dark);
  }
  fieldset div.input-option:has(input:checked) {
    border-radius: var(--radius-1);
    background-color: var(--green-2-dark-2);
    color: #fff;
  }
  input,
  label {
    cursor: pointer;
  }
  .input-option > label {
    flex: 1;
  }
  section.timeline {
    display: grid;
    grid-template-columns: 1fr 2px 1fr;
    grid-template-rows: 1fr;
  }
  .vertical-line {
    background-color: rgba(var(--green-2-rgb-values) / 0.2);
    width: 2px;
    height: 100%;
    z-index: 0;
    grid-row: 1 / 2;
    grid-column: 2 / 3;
  }
  ul {
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    list-style: none;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 40px;
    padding-left: 0;
    max-width: 100ch;
    margin: 0;
  }
  li {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: var(--green-1-light);
    z-index: 2;
    border: 1.5px solid rgba(var(--green-2-rgb-values) / 0.2);
    border-radius: 25px;
    padding: 15px;
  }
  .title p {
    text-align: center;
  }
  .hidden-on-load {
    display: none;
  }

  .two-rows-reveal {
    display: grid;
    grid-template-areas:
      "radio label"
      ". to-reveal";
    grid-template-columns: auto 1fr;
    grid-template-rows: 1fr 1fr;
  }
  .two-rows-reveal > input {
    grid-area: radio;
  }
  .two-rows-reveal > label {
    grid-area: label;
  }
  .two-rows-reveal .distance-input {
    display: none;
    grid-area: to-reveal;
    padding-right: 5px;
  }
  .two-rows-reveal .distance-input > :is(label, input) {
    flex: 20%;
    height: auto;
  }
  #history-in-distance:checked ~ .distance-input {
    display: flex;
    justify-content: center;
    gap: 10px;
  }
  @supports selector(:has(input)) {
    body:has(input[name="display-unit-timeline"][value="history-in-a-year"])
      span[data-unit="history-in-a-year"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="history-in-a-year"]:checked
      )
      span[data-unit="history-in-a-year"] {
      display: block;
    }

    body:has(input[name="display-unit-timeline"][value="history-in-a-day"])
      span[data-unit="history-in-a-day"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="history-in-a-day"]:checked
      )
      span[data-unit="history-in-a-day"] {
      display: block;
    }

    body:has(input[name="display-unit-timeline"][value="years-vs-present"])
      span[data-unit="years-vs-present"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="years-vs-present"]:checked
      )
      span[data-unit="years-vs-present"] {
      display: block;
    }

    body:has(input[name="display-unit-timeline"][value="years-vs-era"])
      span[data-unit="years-vs-era"] {
      display: none;
    }
    body:has(input[name="display-unit-timeline"][value="years-vs-era"]:checked)
      span[data-unit="years-vs-era"] {
      display: block;
    }
    body:has(input[name="display-unit-timeline"][value="history-in-distance"])
      span[data-unit="history-in-distance"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="history-in-distance"]:checked
      )
      span[data-unit="history-in-distance"] {
      display: block;
    }

    fieldset div.inputs-group {
      background-color: var(--green-1-light);
      padding: 4px;
      border-radius: var(--radius-2);
    }

    fieldset div.input-option:focus-within {
      outline: none;
    }
    fieldset div.input-option:has(input:focus-visible) {
      outline: 4px solid var(--pink-1);
    }
    fieldset input {
      width: 0;
      height: 0;
    }
    fieldset div.input-option:has(label:hover):not(:has(input:checked)) {
      background-color: var(--green-2-lighter);
    }
    .two-rows-reveal {
      grid-template-areas: "radio label";
      grid-template-rows: 1fr 0px;
      grid-template-columns: 8px 1fr;
    }
    .two-rows-reveal:has(> input:checked) {
      grid-template-areas:
        "radio label"
        ". to-reveal";
      grid-template-rows: 1fr 1fr;
    }
  }
  @media screen and (min-width: 600px) {
    h1 {
      font-size: 2.5em;
    }
    .tagline {
      font-size: 1.15em;
    }
  }
  @media screen and (min-width: 800px) {
    h1 {
      font-size: 3em;
    }
    .tagline {
      font-size: 1.3em;
    }
    form.card {
      margin-bottom: 100px;
    }
  }
</style>
