---
import Layout from "../layouts/Layout.astro";
import { timeline, IEvent, referenceYear } from "../utils/timeline";

export type ITimelineSpan = "day" | "year";

const getEventTimeByRatio = (
  yearBeforePresent: number,
  timelineSpan: ITimelineSpan
) => {
  const startTimeline = timeline[0].dateYearsBeforePresent;
  const endTimeline = 0;
  const yearsComparedToStart = startTimeline - yearBeforePresent;
  const timeSpanYearEquivalent = startTimeline - endTimeline;
  let spanRatio;
  if (timelineSpan === "day") {
    spanRatio = 24;
  } else if (timelineSpan === "year") {
    spanRatio = 365;
  } else {
    return false;
  }
  const ratioOverTimeSpan =
    (yearsComparedToStart * spanRatio) / timeSpanYearEquivalent;

  if (timelineSpan === "day") {
    return displayHoursMinutesSeconds(ratioOverTimeSpan);
  } else if (timelineSpan === "year") {
    return convertDaysToDate(ratioOverTimeSpan);
  } else {
    return ratioOverTimeSpan;
  }
};

function addDays(date: Date, days: number) {
  const result = date;
  const daysInteger = Math.floor(days);
  const hours = days - daysInteger;

  result.setDate(result.getDate() + daysInteger);
  result.setHours(...timeConvert(hours));
  return result;
}

const convertDaysToDate = (daysNumber: number) => {
  const thisStartOfYearDate = new Date(Date.UTC(2023, 0, 1, 0, 0, 0));
  const adjustedDate = addDays(thisStartOfYearDate, daysNumber);
  return adjustedDate.toLocaleDateString(undefined, {
    month: "long",
    day: "numeric",
  });
};

function timeConvert(hours: number): number[] {
  const hoursToDisplay = Math.floor(hours);
  const minutes = (hours - Math.floor(hours)) * 60;
  const minutesToDisplay = Math.floor(minutes);
  const secondsToDisplay = Math.floor(minutes % 60);
  return [hoursToDisplay, minutesToDisplay, secondsToDisplay];
}

const displayHoursMinutesSeconds = (hours: number): string => {
  const hoursMinSecArr = timeConvert(hours);
  return `${hoursMinSecArr[0]}:${hoursMinSecArr[1]}'${hoursMinSecArr[2]}''`;
};
---

<script>
  export type ITimelineSpan = "day" | "year";

  if (!CSS.supports("selector(:has(input))")) {
    const adjustTimeline = (
      spanElmt: HTMLSpanElement,
      timelineUnit: ITimelineSpan
    ) => {
      if (spanElmt?.dataset.unit === timelineUnit) {
        spanElmt.style.display = "block";
      } else if (spanElmt?.dataset.unit !== timelineUnit) {
        spanElmt.style.display = "none";
      }
    };

    const listenToTimelineInputChange = (e: Event) => {
      const timelineUnit = e?.target?.value;
      if (!timelineUnit) return false;
      document
        .querySelectorAll("ul > li > div.time > span")
        .forEach((eventElSpan) => adjustTimeline(eventElSpan, timelineUnit));
    };
    document
      .querySelectorAll("input")
      .forEach((input) =>
        input.addEventListener("input", listenToTimelineInputChange)
      );
  }
</script>
<Layout title='👩‍🚀Humankind timeline'>
  <h1>🐵🔥 <span class='text-gradient'>Humankind</span> Timeline 🚀👩‍🚀</h1>
  <main>
    <form class='time-unit-selection'>
      <fieldset>
        <legend>Select a timeline unit:</legend>

        <div>
          <input
            type='radio'
            id='history-in-a-year'
            name='display-unit-timeline'
            value='history-in-a-year'
            checked
          />
          <label for='history-in-a-year'>If History was 1 year</label>
        </div>

        <div>
          <input
            type='radio'
            id='history-in-a-day'
            name='display-unit-timeline'
            value='history-in-a-day'
          />
          <label for='history-in-a-day'>If History was 1 day</label>
        </div>

        <div>
          <input
            type='radio'
            id='years-vs-present'
            name='display-unit-timeline'
            value='years-vs-present'
          />
          <label for='years-vs-present'>Years before present</label>
        </div>

        <div>
          <input
            type='radio'
            id='years-vs-era'
            name='display-unit-timeline'
            value='years-vs-era'
          />
          <label for='years-vs-era'>Years compared to our era</label>
        </div>
      </fieldset>
    </form>
  </main>
  <ul role='list' class='timeline' data-timeline-role='timeline'>
    {
      timeline.map((event: IEvent, i) => (
        <li data-timeline-role='event'>
          <div class='time text-gradient'>
            <span data-unit='years-vs-present' class='hidden-on-load'>
              {event.dateYearsBeforePresent} before present day
            </span>
            <span data-unit='years-vs-era' class='hidden-on-load'>
              {event.dateYearsBeforePresent < referenceYear
                ? referenceYear - event.dateYearsBeforePresent
                : referenceYear - event.dateYearsBeforePresent}
            </span>
            <span data-unit='history-in-a-year'>
              {i !== timeline.length - 1
                ? getEventTimeByRatio(event.dateYearsBeforePresent, "year") +
                  " " +
                  getEventTimeByRatio(event.dateYearsBeforePresent, "day")
                : "End of the year, midnight"}
            </span>
            <span data-unit='history-in-a-day' class='hidden-on-load'>
              {i !== timeline.length - 1
                ? getEventTimeByRatio(event.dateYearsBeforePresent, "day")
                : "midnight"}
            </span>
          </div>
          <div class='title'>
            {event.events.map((evt) => (
              <p>{evt}</p>
            ))}
          </div>
        </li>
      ))
    }
  </ul>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 30px;
    padding-left: 0;
    max-width: 100ch;
  }
  li {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .title p {
    text-align: center;
  }
  .hidden-on-load {
    display: none;
  }

  @supports selector(:has(input)) {
    body:has(input[name="display-unit-timeline"][value="history-in-a-year"])
      span[data-unit="history-in-a-year"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="history-in-a-year"]:checked
      )
      span[data-unit="history-in-a-year"] {
      display: block;
    }

    body:has(input[name="display-unit-timeline"][value="history-in-a-day"])
      span[data-unit="history-in-a-day"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="history-in-a-day"]:checked
      )
      span[data-unit="history-in-a-day"] {
      display: block;
    }

    body:has(input[name="display-unit-timeline"][value="years-vs-present"])
      span[data-unit="years-vs-present"] {
      display: none;
    }
    body:has(
        input[name="display-unit-timeline"][value="years-vs-present"]:checked
      )
      span[data-unit="years-vs-present"] {
      display: block;
    }

    body:has(input[name="display-unit-timeline"][value="years-vs-era"])
      span[data-unit="years-vs-era"] {
      display: none;
    }
    body:has(input[name="display-unit-timeline"][value="years-vs-era"]:checked)
      span[data-unit="years-vs-era"] {
      display: block;
    }
  }
</style>
